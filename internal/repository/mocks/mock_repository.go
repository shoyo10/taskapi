// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "taskapi/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositorier is a mock of Repositorier interface.
type MockRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorierMockRecorder
}

// MockRepositorierMockRecorder is the mock recorder for MockRepositorier.
type MockRepositorierMockRecorder struct {
	mock *MockRepositorier
}

// NewMockRepositorier creates a new mock instance.
func NewMockRepositorier(ctrl *gomock.Controller) *MockRepositorier {
	mock := &MockRepositorier{ctrl: ctrl}
	mock.recorder = &MockRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorier) EXPECT() *MockRepositorierMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockRepositorier) CreateTask(ctx context.Context, task *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockRepositorierMockRecorder) CreateTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockRepositorier)(nil).CreateTask), ctx, task)
}

// DeleteTask mocks base method.
func (m *MockRepositorier) DeleteTask(ctx context.Context, filter model.TaskFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockRepositorierMockRecorder) DeleteTask(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockRepositorier)(nil).DeleteTask), ctx, filter)
}

// ListTask mocks base method.
func (m *MockRepositorier) ListTask(ctx context.Context) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTask", ctx)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTask indicates an expected call of ListTask.
func (mr *MockRepositorierMockRecorder) ListTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTask", reflect.TypeOf((*MockRepositorier)(nil).ListTask), ctx)
}

// UpdateTask mocks base method.
func (m *MockRepositorier) UpdateTask(ctx context.Context, filter model.TaskFilter, in model.UpdateTaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, filter, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockRepositorierMockRecorder) UpdateTask(ctx, filter, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockRepositorier)(nil).UpdateTask), ctx, filter, in)
}
